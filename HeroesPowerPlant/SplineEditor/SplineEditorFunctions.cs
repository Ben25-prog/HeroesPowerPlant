using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Windows.Forms;

namespace HeroesPowerPlant.SplineEditor
{
    public class SplineEditorFunctions
    {
        private List<Spline> SplineList = new List<Spline>();
        private string splineFolder;
        private int CurrentlySelectedObject = -1;

        public void AddSplines(string[] fileNames)
        {
            foreach (string i in fileNames)
            {
                Spline s = Spline.FromFile(i);

                if (s.Points.Length < 2)
                {
                    MessageBox.Show("Error: file " + i + " has less than two vertices. Skipping...");
                    continue;
                }
                SplineList.Add(s);
            }
        }

        public void AddBlankSpline()
        {
            Vertex[] Points = new Vertex[2];
            Points[0] = new Vertex(0, 0, 0);
            Points[1] = new Vertex(0, 0, 0);
            SplineList.Add(new Spline { Points = Points });
            SplineList.Last().SetRenderStuff(Program.MainForm.renderer);
        }

        public void DeleteSelectedSpline()
        {
            if (CurrentlySelectedObject != -1 & CurrentlySelectedObject < SplineList.Count)
            {
                int previous = CurrentlySelectedObject;
                SplineList[CurrentlySelectedObject].Dispose();
                SplineList.RemoveAt(CurrentlySelectedObject);
            }
        }
        
        public int GetSplineCount()
        {
            return SplineList.Count;
        }

        public string GetSelectedType()
        {
            return SplineList[CurrentlySelectedObject].Type.ToString();
        }

        public void SelectedIndexChanged(int selectedIndex)
        {
            if (CurrentlySelectedObject != -1 & CurrentlySelectedObject < SplineList.Count)
                SplineList[CurrentlySelectedObject].isSelected = false;

            SplineList[selectedIndex].isSelected = true;
            CurrentlySelectedObject = selectedIndex;
        }

        public void ChangeType(int type)
        {
            if (CurrentlySelectedObject != -1 & CurrentlySelectedObject < SplineList.Count)
                SplineList[CurrentlySelectedObject].Type = (SplineType)type;
        }
        
        public void SplineEditorNewConfig()
        {
            DisposeSplines();

            SplineList = new List<Spline>();
            AddBlankSpline();
        }

        public void RenderSplines(SharpRenderer renderer)
        {
            foreach (Spline s in SplineList) s.Render(renderer);
        }

        public void ViewHere()
        {
            if (CurrentlySelectedObject != -1 & CurrentlySelectedObject < SplineList.Count)
                Program.MainForm.renderer.Camera.SetPosition(SplineList[CurrentlySelectedObject].Points[0].Position - 200 * Program.MainForm.renderer.Camera.GetForward());
        }

        public void DisposeSplines()
        {
            foreach (Spline s in SplineList)
                s.Dispose();
        }

        public void SplineEditorOpenConfig(string ConfigFileName)
        {
            DisposeSplines();
            SplineList = new List<Spline>();

            splineFolder = Path.GetDirectoryName(ConfigFileName) + "\\Splines\\";

            if (!Directory.Exists(splineFolder))
                Directory.CreateDirectory(splineFolder);

            foreach (string i in Directory.GetFiles(splineFolder))
                if (Path.GetExtension(i) == ".obj")
                    SplineList.Add(Spline.FromFile(i));
        }

        public void Save()
        {
            splineFolder = Path.GetDirectoryName(Program.ConfigEditor.GetOpenConfigFileName()) + "\\Splines\\";

            if (!Directory.Exists(splineFolder))
                Directory.CreateDirectory(splineFolder);

            string[] FilesInFolder = Directory.GetFiles(splineFolder);
            for (int i = 0; i < FilesInFolder.Count(); i++)
                if (Path.GetExtension(FilesInFolder[i]) == ".obj")
                    File.Delete(FilesInFolder[i]);

            if (SplineList.Count == 0)
                AddBlankSpline();

            for (int i = 0; i < SplineList.Count; i++)
            {
                StreamWriter streamWriter = new StreamWriter(new FileStream(splineFolder + i.ToString() + ".obj", FileMode.Create));

                streamWriter.WriteLine("## Heroes Mod Loader Stage Mod Spline File");
                streamWriter.WriteLine("## Generated by Heroes Power Plant");
                streamWriter.WriteLine();
                streamWriter.WriteLine("## Properties");
                streamWriter.WriteLine("SPLINE_TYPE=" + SplineList[i].Type.ToString());
                streamWriter.WriteLine("SPLINE_VERTEX_FLAGS=0x0");
                streamWriter.WriteLine("DISTANCE_TO_NEXT_POINT=Auto");
                streamWriter.WriteLine();

                foreach (Vertex v in SplineList[i].Points)
                    streamWriter.WriteLine("v {0} {1} {2}", v.Position.X, v.Position.Y, v.Position.Z);

                streamWriter.Close();
            }
        }
    }
}
